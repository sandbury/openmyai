import ollama
import chromadb
import Levenshtein

documents = "归属于母公司所有者的净利润, △赔付支出净额, 2．权益法下不能转损益的其他综合收益, △保单红利支出, （二）按经营持续性分类：, 二、营业总成本, ☆信用减值损失（损失以“-”号填列）, 9．其他, ☆以摊余成本计量的金融资产终止确认收益 , 7．现金流量套期储备（现金流套期损益的有效部分）, 其中：利息支出, （二）将重分类进损益的其他综合收益, 基本每股收益, 税金及附加, 　　减：营业外支出, 　　　　　　其中：对联营企业和合营企业的投资收益, 研发费用, 加：其他收益, 　　　　　其中：主营业务收入, 其中：营业收入, 销售费用, 投资收益（损失以“-”号填列）, ☆6．其他债权投资信用减值准备, ☆以摊余成本计量的金融资产终止确认收益, 5. 其他, 2．权益法下不能转损益的其他综合收益, 七、综合收益总额, 其中：营业收入, ☆4．金融资产重分类计入其他综合收益的金额, （一）按所有权归属分类：, 　　　　　　　　其他业务收入, △利息支出, 资产减值损失（损失以“-”号填列）, ☆4．金融资产重分类计入其他综合收益的金额, 一、营业总收入, 资产处置收益（损失以“-”号填列）, 公允价值变动收益（损失以“-”号填列）, △利息收入, △提取保险合同准备金净额, 5. 其他, △赔付支出净额, 7．现金流量套期储备（现金流套期损益的有效部分）, 　　　　　　　　其他业务成本, 终止经营净利润（净亏损以“-”号填列）, 管理费用, 基本每股收益, △分保费用, 3．可供出售金融资产公允价值变动损益, 利息收入, 六、其他综合收益的税后净额, 　　　　　　　　 汇兑净损失（净收益以“-”号填列）, △提取保险合同准备金净额, 持续经营净利润（净亏损以“-”号填列）, （二）将重分类进损益的其他综合收益, 归属于母公司所有者的净利润, 加：其他收益, 其中：营业成本, *归属于少数股东的其他综合收益的税后净额, 减：所得税费用, △退保金, 1．重新计量设定受益计划变动额, 归属于母公司所有者的其他综合收益的税后净额, ☆6．其他债权投资信用减值准备, *归属于少数股东的其他综合收益的税后净额, 利息收入, ☆4．企业自身信用风险公允价值变动, 1．权益法下可转损益的其他综合收益, 其中：利息支出, △保单红利支出, 　　　　　　　　 汇兑净损失（净收益以“-”号填列）, 3．可供出售金融资产公允价值变动损益, （一）按所有权归属分类：, 三、营业利润（亏损以“－”号填列）, ☆信用减值损失（损失以“-”号填列）, △利息支出, △手续费及佣金收入, △已赚保费, △手续费及佣金支出, *归属于少数股东的综合收益总额, △汇兑收益（损失以“-”号填列）, 　　　　 其中：政府补助, 持续经营净利润（净亏损以“-”号填列）, ☆2．其他债权投资公允价值变动, 1．权益法下可转损益的其他综合收益, （一）不能重分类进损益的其他综合收益, 资产减值损失（损失以“-”号填列）, ☆3．其他权益工具投资公允价值变动, 稀释每股收益, （一）不能重分类进损益的其他综合收益, 少数股东损益, 归属于母公司所有者的其他综合收益的税后净额, 终止经营净利润（净亏损以“-”号填列）, 1．重新计量设定受益计划变动额, 8．外币财务报表折算差额, 5．持有至到期投资重分类为可供出售金融资产损益, △手续费及佣金收入, △汇兑收益（损失以“-”号填列）, 财务费用, △利息收入, 财务费用, 税金及附加, 其中：营业成本, 归属于母公司所有者的综合收益总额, *归属于少数股东的综合收益总额, 减：所得税费用, 5．持有至到期投资重分类为可供出售金融资产损益, 稀释每股收益, △分保费用, 归属于母公司所有者的综合收益总额, 销售费用, ☆3．其他权益工具投资公允价值变动, △退保金, 8．外币财务报表折算差额, ☆2．其他债权投资公允价值变动, 少数股东损益, 其他, 资产处置收益（损失以“-”号填列）, 　　　　　其中：主营业务成本, 八、每股收益：, 　 加：营业外收入, 四、利润总额（亏损总额以“－”号填列）, 9．其他, △已赚保费, △手续费及佣金支出, 其他, ☆4．企业自身信用风险公允价值变动, ☆净敞口套期收益（损失以“-”号填列）, （二）按经营持续性分类：, ☆净敞口套期收益（损失以“-”号填列）, 管理费用, 公允价值变动收益（损失以“-”号填列）, 五、净利润（净亏损以“－”号填列）, 投资收益（损失以“-”号填列）, 研发费用"
documents2 = "            2.7.3 C级检修,             4.19.3年度决算审计费,            2.7.6 公用系统维护检修,             4.19.4评估费,            2.7.1 A级检修,                       2.8.1.16.3年度决算审计费,        12.4违约赔偿收入,             4.19.6评审费,            2.4.5工会经费,            4.1.5工会经费,       3.8其他,                   4.1.2.6职工疗养费,            2.7.4 D级检修,                       2.8.1.16.4评估费,     4.13办公费,             2.4.1职工工资,             4.19.1咨询服务费,        12.1罚没利得,            2.4.9其他,            2.7.7 修缮费"
cleaned_string = documents2.strip('"')

# 将字符串转换为列表，使用逗号分隔，并去掉每个元素的前后空格
result_list = [item.strip() for item in cleaned_string.split(",")]
print(len(result_list))
result_list1 = ['一、营业收入', '预算板块合并', '期末余额']
scores = []
# for item in result_list:
#     score = Levenshtein.ratio(item.strip(), "告诉我2023年A公司合并的利润总额是多少，谁最高")
#     scores.append((item, score))
#
# # 按得分降序排列，并获取前 10 个得分最高的条目
# top_10 = sorted(scores, key=lambda x: x[1], reverse=True)[:20]
#
# # 打印前 10 个得分最高的条目和分数
# for i, (text, score) in enumerate(top_10, start=1):
#     print(f"排名 {i}: 文档内容: {text}, 相似度分数: {score}")
# client = chromadb.Client( persist_directory="/path/to/persist/directory")
client = chromadb.PersistentClient(
    path="/code/vanna-flask-main"
)

collection = client.get_or_create_collection(name="docs")

# store each document in a vector embedding database
for i, d in enumerate(result_list1):
    response = ollama.embeddings(model="bge-m3:latest", prompt=d)
    embedding = response["embedding"]
    collection.add(
        ids=[str(i)],
        embeddings=[embedding],  # 通过ollama得到的
        documents=[d]  # 17.12光伏售电量
    )

prompt = "告诉我B公司合并2024年一月份的营业收入的预算板块合并是多少"

# generate an embedding for the prompt and retrieve the most relevant doc
response = ollama.embeddings(
    prompt=prompt,
    model="bge-m3:latest"
)
results = collection.query(
    query_embeddings=[response["embedding"]],
    n_results=10,

)
data = results['documents']
for i, doc in enumerate(data):
    print(f"文档内容: {doc}")
    print(f"相似度分数: {results['distances'][i]}")  # 这里的 'distances' 即为相似度分数
print(data[0][0])
print(results['distances'][0][0])
# print(data)
